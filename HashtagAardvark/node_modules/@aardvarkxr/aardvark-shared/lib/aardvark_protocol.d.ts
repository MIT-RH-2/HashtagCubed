import { AvActionState } from './aardvark';
export declare const AardvarkPort = 23842;
export declare enum MessageType {
    SetEndpointType = 100,
    SetEndpointTypeResponse = 101,
    Error = 102,
    GetGadgetManifest = 103,
    GetGadgetManifestResponse = 104,
    NewEndpoint = 200,
    LostEndpoint = 201,
    OverrideTransform = 202,
    UpdateSceneGraph = 300,
    GrabEvent = 301,
    GrabberState = 302,
    GadgetStarted = 303,
    PokerProximity = 304,
    MouseEvent = 305,
    NodeHaptic = 306,
    AttachGadgetToHook = 307,
    DetachGadgetFromHook = 308,
    MasterStartGadget = 309,
    SaveSettings = 310,
    UpdateActionState = 311,
    DestroyGadget = 312,
    ResourceLoadFailed = 313,
    GetInstalledGadgets = 400,
    GetInstalledGadgetsResponse = 401
}
export declare enum WebSocketCloseCodes {
    UserDestroyedGadget = 4701
}
export declare enum EndpointType {
    Unknown = -1,
    Hub = 0,
    Gadget = 1,
    Node = 2,
    Renderer = 3,
    Monitor = 4
}
export interface EndpointAddr {
    type: EndpointType;
    endpointId?: number;
    nodeId?: number;
}
export declare function endpointAddrToString(epa: EndpointAddr): string;
export declare function stringToEndpointAddr(epaStr: string): EndpointAddr;
export declare function endpointAddrIsEmpty(epa: EndpointAddr): boolean;
export declare function endpointAddrsMatch(epa1: EndpointAddr, epa2: EndpointAddr): boolean;
export declare function indexOfEndpointAddrs(epaArray: EndpointAddr[], epa: EndpointAddr): number;
export interface Envelope {
    type: MessageType;
    sender?: EndpointAddr;
    target?: EndpointAddr;
    payload?: string;
    payloadUnpacked?: any;
}
export interface MsgError {
    messageType?: MessageType;
    error: string;
}
export interface MsgSetEndpointType {
    newEndpointType: EndpointType;
    gadgetUri?: string;
    initialHook?: string;
    persistenceUuid?: string;
}
export interface MsgSetEndpointTypeResponse {
    endpointId: number;
    settings?: any;
    persistenceUuid?: string;
}
export interface MsgNewEndpoint {
    newEndpointType: EndpointType;
    endpointId: number;
    gadgetUri?: string;
}
export interface MsgLostEndpoint {
    endpointId: number;
}
export interface MsgGetGadgetManifest {
    gadgetUri: string;
}
export interface MsgGetGadgetManifestResponse {
    error?: string;
    manifest?: AvGadgetManifest;
    gadgetUri?: string;
}
export interface MsgUpdateSceneGraph {
    root?: AvNode;
    hook?: string | EndpointAddr;
    hookFromGadget?: AvNodeTransform;
}
export declare enum EHookVolume {
    Inner = 0,
    Outer = 1
}
export interface GrabberHookState {
    hookId: EndpointAddr;
    whichVolume: EHookVolume;
}
export interface MsgGrabberState {
    grabberId: EndpointAddr;
    hand: EHand;
    grabbables?: AvGrabbableCollision[];
    hooks?: GrabberHookState[];
}
export interface MsgGrabEvent {
    event: AvGrabEvent;
}
export declare function parseEnvelope(envString: string, parsePayload?: boolean): Envelope;
export interface MsgGadgetStarted {
    epToNotify: EndpointAddr;
    mainGrabbable?: number;
    mainHandle?: number;
    mainGrabbableGlobalId?: EndpointAddr;
    mainHandleGlobalId?: EndpointAddr;
}
export interface MsgPokerProximity {
    pokerId: EndpointAddr;
    hand: EHand;
    actionState: AvActionState;
    panels: PokerProximity[];
}
export interface MsgMouseEvent {
    event: AvPanelMouseEvent;
}
export interface MsgNodeHaptic {
    nodeId: EndpointAddr;
    amplitude: number;
    frequency: number;
    duration: number;
}
export interface MsgAttachGadgetToHook {
    grabbableNodeId: EndpointAddr;
    hookNodeId: EndpointAddr;
    hookFromGrabbable?: AvNodeTransform;
}
export interface MsgDetachGadgetFromHook {
    grabbableNodeId: EndpointAddr;
    hookNodeId: EndpointAddr;
}
export interface MsgMasterStartGadget {
    uri: string;
    initialHook: string;
    persistenceUuid: string;
}
export interface MsgSaveSettings {
    settings: any;
}
export interface MsgUpdateActionState {
    gadgetId: number;
    hand: EHand;
    actionState: AvActionState;
}
export interface MsgOverrideTransform {
    nodeId: EndpointAddr;
    transform: AvNodeTransform;
}
export interface MsgGetInstalledGadgets {
}
export interface MsgGetInstalledGadgetsResponse {
    installedGadgets: string[];
}
export interface MsgDestroyGadget {
    gadgetId: number;
}
export interface MsgResourceLoadFailed {
    nodeId: EndpointAddr;
    resourceUri: string;
    error: string;
}
export interface PokerProximity {
    panelId: EndpointAddr;
    x: number;
    y: number;
    distance: number;
}
export declare enum AvNodeType {
    Invalid = -1,
    Container = 0,
    Origin = 1,
    Transform = 2,
    Model = 3,
    Panel = 4,
    Poker = 5,
    Grabbable = 6,
    Handle = 7,
    Grabber = 8,
    Hook = 9,
    Line = 10,
    PanelIntersection = 11
}
export declare enum AvPanelMouseEventType {
    Unknown = 0,
    Down = 1,
    Up = 2,
    Enter = 3,
    Leave = 4,
    Move = 5
}
export interface AvPanelMouseEvent {
    type: AvPanelMouseEventType;
    panelId: EndpointAddr;
    pokerId: EndpointAddr;
    x: number;
    y: number;
}
export interface AvPanelHandler {
    (event: AvPanelMouseEvent): void;
}
export declare enum AvGrabEventType {
    Unknown = 0,
    EnterRange = 1,
    LeaveRange = 2,
    StartGrab = 3,
    EndGrab = 4,
    EnterHookRange = 5,
    LeaveHookRange = 6,
    RequestGrab = 7,
    RequestGrabResponse = 8,
    CancelGrab = 9,
    GrabStarted = 10,
    UpdateGrabberHighlight = 11,
    TransformUpdated = 12,
    Detach = 13
}
export declare enum GrabberHighlight {
    None = 0,
    InRange = 1,
    WaitingForConfirmation = 2,
    WaitingForGrabToStart = 3,
    Grabbed = 4,
    NearHook = 5,
    WaitingForReleaseAfterRejection = 6
}
export interface AvGrabEvent {
    type: AvGrabEventType;
    senderId?: number;
    grabbableId?: EndpointAddr;
    handleId?: EndpointAddr;
    grabberId?: EndpointAddr;
    hookId?: EndpointAddr;
    requestId?: number;
    allowed?: boolean;
    useIdentityTransform?: boolean;
    highlight?: GrabberHighlight;
    parentFromNode?: AvNodeTransform;
    universeFromNode?: AvNodeTransform;
    hookFromGrabbable?: AvNodeTransform;
}
export interface AvGrabEventProcessor {
    (event: AvGrabEvent): void;
}
export interface AvGrabbableCollision {
    grabbableId: EndpointAddr;
    handleId: EndpointAddr;
    handleFlags: number;
    grabbableFlags: number;
}
export interface AvVector {
    x: number;
    y: number;
    z: number;
}
export interface AvQuaternion {
    x: number;
    y: number;
    z: number;
    w: number;
}
export interface AvNodeTransform {
    position?: AvVector;
    rotation?: AvQuaternion;
    scale?: AvVector;
}
export declare enum EVolumeType {
    Invalid = -1,
    Sphere = 0,
    ModelBox = 1,
    AABB = 1
}
export interface AABB {
    xMin: number;
    xMax: number;
    yMin: number;
    yMax: number;
    zMin: number;
    zMax: number;
}
export interface AvVolume {
    type: EVolumeType;
    radius?: number;
    uri?: string;
    aabb?: AABB;
}
export declare enum ENodeFlags {
    Visible = 1,
    PreserveGrabTransform = 2,
    NotifyOnTransformChange = 4,
    NotifyProximityWithoutGrab = 8,
    AllowDropOnHooks = 16,
    AllowMultipleDrops = 32,
    Tethered = 64
}
export interface AvConstraint {
    minX: number;
    maxX: number;
    minY: number;
    maxY: number;
    minZ: number;
    maxZ: number;
}
export interface AvColor {
    r: number;
    g: number;
    b: number;
    a?: number;
}
export interface AvNode {
    type: AvNodeType;
    id: number;
    persistentName?: string;
    globalId?: EndpointAddr;
    flags: ENodeFlags;
    children?: AvNode[];
    propOrigin?: string;
    propTransform?: AvNodeTransform;
    propModelUri?: string;
    propVolume?: AvVolume;
    propOuterVolumeScale?: number;
    propInteractive?: boolean;
    propCustomNodeType?: string;
    propSharedTexture?: AvSharedTextureInfo;
    propConstraint?: AvConstraint;
    propColor?: AvColor;
    propEndAddr?: EndpointAddr;
    propThickness?: number;
    propStartGap?: number;
    propEndGap?: number;
    propScaleToFit?: AvVector;
}
export declare enum EHand {
    Invalid = -1,
    Left = 0,
    Right = 1
}
declare enum ETextureType {
    Invalid = 0,
    D3D11Texture2D = 1
}
declare enum ETextureFormat {
    R8G8B8A8 = 1,
    B8G8R8A8 = 2
}
export interface AvSharedTextureInfo {
    dxgiHandle?: string;
    type: ETextureType;
    format: ETextureFormat;
    invertY?: boolean;
    width: number;
    height: number;
}
export interface AvGadgetManifest {
    name: string;
    permissions: string[];
    width: number;
    height: number;
    model: string;
    startAutomatically: boolean;
}
export declare enum EAction {
    A = 0,
    B = 1,
    Squeeze = 2,
    Grab = 3,
    Detach = 4,
    Max = 5
}
export declare function getActionFromState(action: EAction, state: AvActionState): boolean;
export declare function emptyActionState(): AvActionState;
export declare function filterActionsForGadget(actionState: AvActionState): AvActionState;
export {};
//# sourceMappingURL=aardvark_protocol.d.ts.map