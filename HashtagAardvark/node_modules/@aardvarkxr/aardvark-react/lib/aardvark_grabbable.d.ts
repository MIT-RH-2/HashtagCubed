import { AvBaseNode, AvBaseNodeProps } from './aardvark_base_node';
import { EndpointAddr, AvGrabEvent, AvConstraint, AvNodeTransform } from '@aardvarkxr/aardvark-shared';
export interface GrabResponse {
    allowed: boolean;
    proxyGrabbableGlobalId?: EndpointAddr;
    proxyHandleGlobalId?: EndpointAddr;
}
/** This enum defines the possible highlight states of an AvGrabbable.
*/
export declare enum HighlightType {
    /** Nothing interesting is going on with the grabbable. */
    None = 0,
    /** There is a grabber within grabbing range of the grabbable. */
    InRange = 1,
    /** There is a grabber actively grabbing the grabbable, and it isn't attached to anything. */
    Grabbed = 2,
    /** The grabbed grabbable is within drop range of a hook. */
    InHookRange = 3
}
interface AvGrabbableProps extends AvBaseNodeProps {
    /** This callback is called whenever the highlight state of the grabbable is updated.
     * Use this to change models, apply scale, animate, color tint, or however else you
     * want to indicate grabber proximity and grab state to the user. If this callback is
     * not specified, the grabbable will not highlight.
     *
     * @default no highlight
     */
    updateHighlight?: (highlightType: HighlightType, handleAddr: EndpointAddr, tethered: boolean) => void;
    /** This callback allows the grabbable's owner to override the default behavior
     * when the grabbable is grabbed. If this is not specified, the grabbable's transform
     * will be updated to match the grabber whenever it is grabbed.
     *
     * @default grabbing moves the grabbable
     */
    onGrabRequest?: (event: AvGrabEvent) => Promise<GrabResponse>;
    /** This callback allows the grabbables owner to respond when the transform for the
     * grabbable has been updated as the result of being grabbed.
     *
     * * parentFromNode - The transform from the coordinate system of the grabbable itself to the
     * 		coordinate system of its parent in the scene graph.
     * * universeFromNode - The transform from the coordinate system of the grabbable itself to
     * 		the coordinate system of the "universe", which means the center of the user's play area.
     */
    onTransformUpdated?: (parentFromNode: AvNodeTransform, universeFromNode: AvNodeTransform) => void;
    /** Defines the constraints to apply to the transform of the grabbable after it has been
     * grabbed.
     *
     * @default No constraints
     */
    constraint?: AvConstraint;
    /** If this prop is true, the grabbable will stay wherever it was dropped at the end of a
     * grab. If preserveDropTransform is false for the root grabbable of a gadget, that gadget
     * will not be able to be dropped in the world, and will be destroyed when dropped anywhere
     * other than a hook
     *
     * @default false
     */
    preserveDropTransform?: boolean;
    /** The initial transform of the grabbable before it has been grabbed.
     *
     * @default identity transform
     */
    initialTransform?: AvNodeTransform;
    /** If this prop is true the grabbable can be attached to hooks by dropping on them.
     *
     * @default false
     */
    dropOnHooks?: boolean;
    /** If this is true, the grabbable will always be grabbed with an identity transform
     * instead of preserving the transform between the grabbable and the grabber at the
     * start of the grab.
     *
     * @default false
     */
    grabWithIdentityTransform?: boolean;
}
interface AvGrabbableState {
    /** If this grabbable is tethered to a hook, this will be the EPA of the hook. */
    hook?: EndpointAddr;
    /** If this grabbable is tethered to a hook, this will be the transform from
     * the grabbable to the hook.
     */
    hookFromGrabbable?: AvNodeTransform;
    /** The last highlight that we told anyone. */
    lastHighlight: HighlightType;
    /** The last handle that we told anyone */
    lastHandle: EndpointAddr;
}
/** This is a node that can be grabbed. Depending on how it is configured, the node
 * may be reparented to the grabber, or it may just call back the owner with its
 * updated grab state.
 */
export declare class AvGrabbable extends AvBaseNode<AvGrabbableProps, AvGrabbableState> {
    /** The last highlight that we told anyone. */
    private m_lastNotifiedHighlight;
    private m_lastNotifiedHandle;
    private m_lastNotifiedTethered;
    constructor(props: any);
    buildNode(): import("@aardvarkxr/aardvark-shared").AvNode;
    grabInProgress(grabber: EndpointAddr): void;
    componentDidUpdate(): void;
    private onGrabEvent;
}
export {};
//# sourceMappingURL=aardvark_grabbable.d.ts.map