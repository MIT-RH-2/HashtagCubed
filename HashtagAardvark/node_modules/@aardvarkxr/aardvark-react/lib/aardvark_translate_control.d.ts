import * as React from 'react';
import { HighlightType, GrabResponse } from './aardvark_grabbable';
import { AvGrabEvent, AvNodeTransform, EndpointAddr } from '@aardvarkxr/aardvark-shared';
interface TransformControlProps {
    /** The callback is invoked whenever the transform for the control is updated,
     * which will happen continuously during a grab of any of the control's handles.
     */
    onSetValue: (newValue: AvNodeTransform) => void;
    /** If this prop is true, the transform control will display handles that
     * allow the user to apply a scale.
     * This is not yet implemented.
     *
     * @default false
     */
    scale?: boolean;
    /** If this prop is true, the transform control will display handles that
     * allow the user to apply strict yaw, pitch, and roll rotations.
     * This is not yet implemented.
     *
     * @default false
     */
    rotate?: boolean;
    /** If this prop is true, the transform control will display handles that
     * allow the user to apply strict X, Y, and Z translations.
     *
     * @default false
     */
    translate?: boolean;
    /** If this prop is true, the transform control will display a handle that
     * allows the users to apply a general translation and/or rotation.
     *
     * @default false
     */
    general?: boolean;
    /** The starting transform of the control */
    initialTransform?: AvNodeTransform;
    /** If this prop is true, the control will be shown in a minimized form until
     * the user moves a grabber close to it
     *
     * @default false
     */
    minimizeUntilNearby?: boolean;
}
interface TransformControlState {
    grabberInRange: boolean;
}
/** Displays a control that allows the user to control the transform of all child nodes.  */
export declare class AvTransformControl extends React.Component<TransformControlProps, TransformControlState> {
    constructor(props: any);
    onUpdateHighlight(newHighlight: HighlightType, handleAddr: EndpointAddr, tethered: boolean): void;
    onGrabRequest(event: AvGrabEvent): Promise<GrabResponse>;
    onTransformUpdated(parentFromNode: AvNodeTransform, universeFromNode: AvNodeTransform): void;
    private renderTranslate;
    private renderGeneral;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=aardvark_translate_control.d.ts.map