import { AvGadgetManifest, AvGrabEvent, MessageType, EndpointAddr, MsgSetEndpointTypeResponse } from '@aardvarkxr/aardvark-shared';
export interface MessageHandler {
    (type: MessageType, payload: any, sender: EndpointAddr, target: EndpointAddr): void;
}
export interface OpenHandler {
    (settings: any, persistenceUuid?: string): void;
}
export declare class CAardvarkEndpoint {
    private m_ws;
    private m_handlers;
    private m_callbacks;
    private m_defaultHandler;
    private m_realOpenHandler;
    private m_handshakeComplete;
    private m_endpointId;
    private m_queuedMessages;
    private m_pendingManifestLoads;
    constructor(openHandler: OpenHandler, handshakeComplete: OpenHandler, defaultHandler?: MessageHandler);
    getEndpointId(): number;
    private connectToServer;
    registerHandler(type: MessageType, handler: MessageHandler): void;
    waitForResponse(type: MessageType, callback: MessageHandler): void;
    onMessage(msgEvent: MessageEvent): void;
    onSetEndpointTypeResponse(type: MessageType, m: MsgSetEndpointTypeResponse): void;
    sendMessage(type: MessageType, msg: any): void;
    sendGrabEvent(event: AvGrabEvent): void;
    getGadgetManifest(gadgetUri: string): Promise<AvGadgetManifest>;
    private onGetGadgetManifestResponse;
    onClose(ev: CloseEvent): void;
}
export declare class CMonitorEndpoint extends CAardvarkEndpoint {
    constructor(defaultHandler?: MessageHandler);
    onOpen(): void;
}
//# sourceMappingURL=aardvark_endpoint.d.ts.map