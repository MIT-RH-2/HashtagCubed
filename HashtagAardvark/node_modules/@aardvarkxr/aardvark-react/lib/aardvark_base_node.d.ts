import * as React from 'react';
import { EndpointAddr, AvNode, AvNodeType, ENodeFlags } from '@aardvarkxr/aardvark-shared';
declare global {
    namespace JSX {
        interface IntrinsicElements {
            "av-node": any;
        }
    }
}
export interface AvBaseNodeProps {
    /** This is the ID of the DOM element that is created as the parent of the component.
     * It is used to reference other nodes in the gadget. If it is specified, it must
     * be unique within the gadget.
     *
     * @default none
     */
    id?: string;
    /** Controls whether or not this node and its children are visible.
     * If retaining the state of a node is important as it comes and goes,
     * use the visible prop instead of omitting the node from the render function.
     * This allows the renderer to retain the node's state even when you don't want it
     * to draw.
     *
     * @default true
     */
    visible?: boolean;
    /** The persistent name of this node when saving the user's state.
     * For AvHook and AvGrabbable nodes, this is required to associate persistent
     * state with the same hook or grabbable from run to run.
     */
    persistentName?: string;
    /** Set this prop to be notified when the node is assigned its endpoint address.
     * This is not necessary for most nodes.
     */
    onIdAssigned?: (addr: EndpointAddr) => void;
    /** @ignore */
    editable?: boolean;
}
export interface IAvBaseNode {
    m_nodeId: number;
    buildNode(): AvNode;
    createNodeForNode(): AvNode;
    grabInProgress(grabber: EndpointAddr): void;
}
export declare abstract class AvBaseNode<TProps, TState> extends React.Component<TProps, TState> implements IAvBaseNode {
    m_nodeId: number;
    private m_firstUpdate;
    constructor(props: any);
    abstract buildNode(): AvNode;
    grabInProgress(grabber: EndpointAddr): void;
    createNodeForNode(): AvNode;
    componentWillUnmount(): void;
    protected createNodeObject(type: AvNodeType, nodeId: number): AvNode;
    private get baseProps();
    isVisible(): boolean;
    protected getNodeFlags(): ENodeFlags;
    baseNodeRender(node: IAvBaseNode, children: React.ReactNode): JSX.Element;
    componentDidUpdate(): void;
    endpointAddr(): EndpointAddr;
    render(): JSX.Element;
}
//# sourceMappingURL=aardvark_base_node.d.ts.map